@startuml
left to right direction

interface MiniSataWeb <<services>> {
    + authenticate(login, password): Usuario
    + addUsuario(usuario): Usuario
    + updateUsuario(usuario): Usuario
    + getUsuario(rut): Usuario
    + getUsuarios(): List<Usuario>
    ..
    + addEquipo(equipo): Equipo
    + updateEquipo(equipo): Equipo
    + getEquipo(id): Equipo
    + getEquipos(): List<Equipo>
    + uploadArchivo(archivo, id): Archivo
    + getArchivos(id): List<Archivo>
    + getValvulasEquipo(id): List<Actuador>
    ..
    + getSimulaciones(): List<Simulacion>
    + getSimulacion(id): Simulacion
    ..
    + getRegistros(rut): Registro
    ..
    + startSimulacion(simulacion): Simulacion
    + getSimulacionActual(idEquipo): Simulacion
    + getLecturaSensores(idEquipo): Simulacion
}

interface MiniSataBoard <<services>> {
    /'+ retrieveComponente(id): Componente
    ..'/
    + startSimulacion(simulacion): Simulacion
    + getSimulacionActual(): Simulacion
    + getLecturasSensores(): Simulacion
    ..
    + sendMensajeEncendido(): String

}

class Usuario {
    {static} id: Long
    rut: String
    email: String
    nombre: String
    apellido: String
    password: String
}

enum EstadoUsuario {
    NONE
    ACTIVO
    INACTIVO
    ...
}

enum RolUsuario {
    NONE
    ADMINISTRADOR
    CONFIGURADOR
    OPERADOR
}

class Equipo {
    {static} id: Long
    nombre: String
    descripcion: String
    urlRepositorio: String
}


enum EstadoEquipo {
    NONE
    PROTOTIPO
    CONSTRUCCION
    ...
}

class Archivo {
    {static} id: Long
    data: byte[]
}

enum TipoArchivo {
    NONE
    PNG
    PDF
    JPG
    ...
}

class Componente {
    {static} id: Long
    nombre: String
    descripcion: String
}

class Actuador {
    {static} id: Long
}

class Sensor {
    {static} id: Long
    url: String
}

enum EstadoComponente {
    NONE
    ACTIVO
    INACTIVO
    FALLA
    REPARACION
    ...
}

/'enum ConexionComponente {
    NONE
    INPUT_ANALOGICO
    INPUT_DIGITAL
    OUTPUT_ANALOGICO
    OUTPUT_DIGITAL
}'/

enum TipoActuador {
    NONE
    VALVULA
    ...
}

enum TipoSensor {
    NONE
    CAMARA
    FLUJOMETRO
    TERMOMETRO
    ...
}

class Placa {
    {static} id: Long
    nombre: String
    descripcion: String
    ...
}

enum TipoPlaca {
    NONE
    ARDUINO_2560
    ESP32
    ...
}


class Simulacion {
    {static} id: Long
    nombre: String
    descripcion: String
    fechaCreacion: String
}

class Ejecucion {
    {static} id: Long
    aguaCaidaTotal: Double
    fechaEjecucion: String
}

class Evento {
    {static} id: Long
    intensidad: Integer
    duracion: Integer
    posicion: Integer
}

class Secuencia {
    {static} id: Long

}

class Registro {
    {static} id: Long
    idEntidad: Long
    fecha: ZonedDateTime
    descripcion: String
}

enum TipoRegistro {
    NONE
    CREACION_USUARIO
    LOGIN_USUARIO
    CREACION_SIMULACION
    INICIO_SIMULACION
    UPLOAD_ARCHIVO
    ...
}

Usuario *--> "1" EstadoUsuario: estado
Usuario *--> "1" RolUsuario: rol

Equipo o--> "*" Archivo: archivos
Equipo *--> "1" EstadoEquipo: estado
Equipo --> "*" Simulacion: simulaciones
Equipo --> "*" Placa: placas
Placa *--> "*" Componente: pines
Placa *--> "1" TipoPlaca: tipo

Archivo *--> "1"  TipoArchivo: tipoArchivo

Componente *--> "1" EstadoComponente: estado
Componente <|-- Sensor
Componente <|-- Actuador

Actuador *--> "1" TipoActuador: tipo
Sensor *--> "1" TipoSensor: tipo

Actuador --> "1" Secuencia: secuencia
Secuencia --> "* {sorted}" Evento: evento

Simulacion *--> "*" Componente: componentes
Simulacion --> "*" Ejecucion: ejecuciones
Ejecucion o--> "*" Evento: eventos

Registro *--> "1" Usuario: usuario
Registro *--> "1" TipoRegistro: tipo

@enduml
