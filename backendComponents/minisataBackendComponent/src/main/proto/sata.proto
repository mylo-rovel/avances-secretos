syntax = "proto3";

// Then the compiler also creates a separate .java file for each top-level message,
// enumeration, and service declared in the .proto file.
option java_multiple_files = true;
option java_package = "cl.ucn.fondef.sata.mini.grpc";

// Estas son las peticiones que se enviarán desde "Backend Application"
// hasta el "Central Core" para que pueda manejar la base de datos
service WebCoreCommuService {
  // el atributo JsonWebToken del objeto ObjetoSesion debe ser "" si el inicio de sesion falla
  rpc loginUsuario(Credenciales) returns (ObjetoSesion){}

  // Usuario Administrador
  rpc agregarUsuario(UsuarioNuevo) returns (MensajeResultadoOperacion) {}
  rpc getUsuario(Rut) returns (Usuario) {}
  rpc setUsuario(Usuario) returns (MensajeResultadoOperacion) {}
  rpc getUsuarios(Empty) returns (ListaUsuarios) {}

  // INHABILITAR USUARIO/SIMULADOR es sólo editar 1 atributo
  // podriamos simplemente usar la función setUsuario/setEquipo

  // Usuario Configurador y Operador
  // agregarEquipo y setEquipo tienen la keyword "stream" para enviar las fotos como stream
  rpc crearEquipo(Equipo) returns (MensajeResultadoOperacion){}
  rpc getEquipos(Empty) returns (ListaEquiposAcotado) {}
  rpc getEquipo(IdElemento) returns (Equipo) {}
  rpc setEquipo(Equipo) returns (MensajeResultadoOperacion){}

  rpc getSimulaciones(Empty) returns (ListaSimulacionesAcotada){}
  rpc getSimulacionEspecifica(IdElemento) returns (SimulacionEspecifica){}

  // el cliente nuxt enviará la petición de inicio y la recibirá el "Backend App". Luego,
  // este ejecutará la función de abajo para enviarle al "Central Core" los "ParametrosSimulacion".
  // El "Central Core", como server, recibirá los valores para redirigirlos ejecutando (1).
  rpc sendValoresInicioSimulacion(ParametrosInicioSimulacion) returns (MensajeResultadoOperacion){}
  // "Central Core" desde (1) recibirá un String de respuesta que luego se enviará a "Backend App"

  // esta funcion busca preguntarle al Raspberry qué equipo y simulación está corriendo
  // va de la mano con la funcion (2)      OJO  bool simulacionIniciada
  rpc getSimulacionEjecutandose(Empty) returns (SimulacionEjecutandose){}
  // si no hay simulacion iniciada, los valores string deben ser "" y el atributo
  // simulacionIniciada = false

  // esta funcion va de la mano con (3) y busca obtener los valores obtenidos de los sensores
  // como un "stream" => iremos obteniendo los valores a través del tiempo
  // BUSCAR WEB SOCKETS y CÓMO CANCELAR UN STREAM SI EL CLIENTE CAMBIA DE PÁGINA
  rpc getLecturasEquipo(Empty) returns (stream LecturaSensores) {}
}


// Estas son las peticiones que se enviarán desde "Central Core"
// hasta el Componente Raspi para manejar el hardware
service CoreRaspiCommuService {
  // (1)                       acá generamos la id de la simulacion si es que todo sale bien
  rpc startSimulacion(ParametrosInicioSimulacion) returns (ResultadoInicioSimulacion){}

  // (2) preguntarle al raspi qué equipo y qué secuencia se usaron  => OJO bool simulacion_ejecutandose
  rpc getSimulacionEjecutandose(Empty) returns (SimulacionEjecutandose){}

  // (3) obtener valores de los sensores
  rpc getLecturasEquipo(Empty) returns (stream LecturaSensores) {}
}

// se usa esto para las funciones que usan 0 argumentos
message Empty {}

message IdElemento {
  int64 id = 1;
}

message Credenciales {
  string correo = 1;
  string contrasena = 2;
}

message ObjetoSesion {
  bool sesion_iniciada = 1;
  string Json_Web_Token = 2;
}

message MensajeResultadoOperacion {
  string mensaje_texto = 1;
}

message Usuario {
  string nombre = 1;
  string apellido = 2;
  string rut = 3;
  string correo = 4;
  string contrasena = 5;
  string rol = 6;
  bool estado = 7;
}

message UsuarioNuevo {
  string rut_administrador = 1;
  Usuario usuario_nuevo = 2;
}

message Rut {
  string rut = 1;
}

message ListaUsuarios {
  repeated Usuario lista_usuarios = 1;
}

message CompFisico {
  int64 id = 1;
  string descripcion = 2;
  int32 pin = 3;
  bool estado = 4;
}

// la palabra "repeated" quiere decir que aceptaremos una lista de eso
message Equipo {
  string nombre = 1;
  string descripcion = 2;
  string enlace_repo = 3;
  repeated bytes imagen = 4;
  repeated CompFisico lista_valvulas = 5;
  repeated CompFisico lista_sensores = 6;
  repeated CompFisico lista_camaras = 7;
  bool estado = 8;
  string rut_configurador = 9;
}

// esto corresponde a una fila de la tabla display equipos
// tambien sirve para las listas desplegables
message EquipoAcotado {
  int64 id = 1;
  string nombre = 2;
  bool estado = 3;
}

message ListaEquiposAcotado {
  repeated EquipoAcotado lista_equipos_acotado = 1;
}

// esto corresponde a una fila de la tabla display simulaciones
// tambien sirve para las listas desplegables
message SimulacionAcotada {
  int64 id_simulacion = 1;
  string nombre_equipo = 2;
  string fecha_simulacion = 3;
  double agua_caida = 4;
}

message ListaSimulacionesAcotada {
  repeated SimulacionAcotada lista_simulaciones_acotada = 1;
}

// cada Evento es una fila de la tabla generador de eventos
message Evento {
  int32 intensidad = 1;
  int32 duracion = 2;
}

// una secuencia es el conjunto de eventos en una válvula
// una secuencia es cada tabla de eventos
message Secuencia {
  repeated Evento lista_eventos = 1;
}

message SimulacionEspecifica {
  int64 id_simulacion = 1;
  string fecha_simulacion = 2;
  string nombre_equipo = 3;
  string descripcion_equipo = 4;
  repeated Secuencia lista_secuencias = 5;
  double agua_caida = 6;
}

message ParametrosInicioSimulacion {
  int64 id_equipo = 1;
  string rut_operador = 2;
  string nombre_simulacion = 3;
  string descripcion_simulacion = 4;
  repeated Secuencia lista_secuencias = 5;
}

message ResultadoInicioSimulacion {
  bool inicio_exitoso = 1;
  string mensaje_resultado = 2;
  string fecha = 3;
}

message SimulacionEjecutandose {
  bool simulacion_ejecutandose = 1;
  int64 id_simulacion = 2;
  int64 id_equipo = 3;
}

message LecturaSensores {
  int64 id_equipo = 1;
  double flujo_medido = 2;
  double tiempo_transcurrido = 3;
}